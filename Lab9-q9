
import java.util.*;

public class Dish {

    private final String name;
    private final boolean vegetarian;
    private final int calories;
    private final Type type;

    public Dish(String name, boolean vegetarian, int calories, Type type) {
        this.name = name;
        this.vegetarian = vegetarian;
        this.calories = calories;
        this.type = type;
    }

    public String getName() {
        return name;
    }

    public boolean isVegetarian() {
        return vegetarian;
    }

    public int getCalories() {
        return calories;
    }

    public Type getType() {
        return type;
    }

    public enum Type { MEAT, FISH, OTHER }

    @Override
    public String toString() {
        return name;
    }

    public static final List<Dish> menu =
            Arrays.asList( new Dish("pork", false, 800, Dish.Type.MEAT),
                    new Dish("beef", false, 700, Dish.Type.MEAT),
                    new Dish("chicken", false, 400, Dish.Type.MEAT),
                    new Dish("french fries", true, 530, Dish.Type.OTHER),
                    new Dish("rice", true, 350, Dish.Type.OTHER),
                    new Dish("season fruit", true, 120, Dish.Type.OTHER),
                    new Dish("pizza", true, 550, Dish.Type.OTHER),
                    new Dish("prawns", false, 400, Dish.Type.FISH),
                    new Dish("salmon", false, 450, Dish.Type.FISH));

    public static double calculateTotalCaloriesMethodReference(){
        return menu.stream().map(Dish::getCalories).reduce(0, Integer::sum);
    }
    public static void main(String[] args)
    {
      boolean veggiExist=menu.stream().anyMatch(Dish::isVegetarian);
      System.out.println("Is there any Vegetarian meal available? : "+veggiExist);

      //Is there any healthy menu have calories less than 1000
      boolean healthyItem=menu.stream().anyMatch(x->x.getCalories()<1000);
      System.out.println("Healthy menu have calories less than 1000? : "+healthyItem);

        //Is there any healthy menu have calories greater than 1000
        boolean nonHealthyItem=menu.stream().anyMatch(x->x.getCalories()>1000);
        System.out.println("Healthy menu have calories greater than 1000? : "+nonHealthyItem);

        Optional<Dish> meatDish=menu.stream().filter(x->x.type.equals(Type.MEAT)).findFirst();
        System.out.println("First Meat Dish : "+meatDish);

        int totalCalories=menu.stream().map(x->x.getCalories()).reduce(0,Integer::sum);
        System.out.println("Total Calories in the dishes are : "+totalCalories);

        int totalCalories2=menu.stream().map(x->x.getCalories()).reduce(0,Integer::sum);
        System.out.println("Total Calories in the dishes are : "+totalCalories);

        System.out.println("Total Calories in the dishes are : "+calculateTotalCaloriesMethodReference());
    }
}

