
import kotlin.Triple;

import java.util.*;
import java.util.function.BiFunction;
import java.util.function.Function;
import java.util.function.Supplier;
import java.util.stream.Stream;

class Human
{
    String name;
    int age;
    String gender;

    public Human(String name){
        this.name = name;
    }
    public Human(String name,int age){
        this.name = name;
        this.age = age;
    }

    public Human(String name,int age, String gender){
        this.name = name;
        this.age = age;
        this.gender = gender;
    }
    public String getName() {
        return name;
    }
    public void setName(String name) {
        this.name = name;
    }
    public int getAge() {
        return age;
    }
    public void setAge(int age) {
        this.age = age;
    }
    public String getGender() {
        return gender;
    }
    public void setGender(String gender) {
        this.gender = gender;
    }
    @Override
    public String toString() {
        return "Human [name=" + name + ", age=" + age + ", gender=" + gender + "]";
    }
}

public class ConstructorReference {
    public static void main(String args[]){
        Human[] list = { new Human("Joe",35,"Male"), new Human("Jane",45,"Female"), new Human("John",30,"Male")};

        // Query 1  : Print only Female candidates names
      var lists=  Arrays.stream(list) .filter(x-> Objects.equals(x.getGender(), "female")).map(Human::getName).toList();


    /* Query 2 : Create an object for the Type of Human class by choosing suitable Interface for the three  constructors using ClassName::new.
                 Then print the object status */
         Function<String,Human> c1=Human:: new ;
         Human human1=c1.apply("Osama");
         System.out.println(human1);

        BiFunction<String,Integer,Human> c2= Human::new;
        Human human2=c2.apply("Mike",30);
        System.out.println(human2);

        TriFunction<String, Integer, String, Human> humanCreator3 = Human::new;
        Human human3 = humanCreator3.apply("Charlie", 40, "Male");
        System.out.println("Human created using three-argument constructor: " + human3);

      //  TriFunction<String, Integer, String, Human> humanCreator4 = (name,age,gender)->new Human(name,age,gender);
      //  Human human4 = humanCreator3.apply("Charlie", 40, "Male");
      //  System.out.println("Human created using three-argument constructor: " + human4);


        // Query 3 : Count the male candidates whose age is more than 30
           long OverThirtyCandidates= Arrays.stream(list).toList().stream().
                   filter(x->x.getAge()>30&&"Male".equalsIgnoreCase(x.getGender()))
                   .count();
        System.out.println("the male candidates whose age is more than 30 are "+OverThirtyCandidates);

    }


     interface TriFunction<T,U,V,R>
    {
        R apply (T t,U u,V v);
    }



}
